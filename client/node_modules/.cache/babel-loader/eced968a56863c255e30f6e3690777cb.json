{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\Coding\\\\express-react-seperate\\\\client\\\\src\\\\components\\\\FileIcons.js\",\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setIconsList, selectIconsList } from \"../features/iconsSlice\";\nimport './FileIcons.css';\nimport './FilePreview.css';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack'; // import FilePreview from './FilePreview';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FileIcons() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const dispatch = useDispatch(); // PREVIEW OVERLAY\n\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const showPreview = file => {\n    let fileType = file.split('.').pop().toLowerCase();\n    var media;\n\n    switch (fileType) {\n      case \"mp4\":\n        media = /*#__PURE__*/_jsxDEV(\"video\", {\n          className: \"preview\",\n          controls: true,\n          muted: \"muted\",\n          loop: true,\n          autoPlay: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: \"/media/\" + file,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 9\n        }, this);\n        break;\n\n      case \"png\":\n      case \"jpg\":\n      case \"gif\":\n        media = /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"preview\",\n          src: \"/media/\" + file,\n          alt: file\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this);\n        break;\n\n      default:\n        media = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview__unsupported\",\n          children: \"This file type is not supported.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }, this);\n    }\n\n    setSelectedFile( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay__header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview__close\",\n          onClick: closePreview,\n          children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n            className: \"preview__close-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), media]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this));\n  };\n\n  const closePreview = () => {\n    setSelectedFile(null);\n  }; // HIGHLIGHTING ICONS\n  // TODO: Create this with useRef instead...\n\n\n  const highlightIcons = element => {\n    _s();\n\n    console.log(files);\n    let files = useSelector(selectIconsList);\n    files.forEach(id => {\n      console.log(id);\n      document.getElementById(id).style.backgroundColor = \"white\";\n      document.getElementById(id).style.color = \"#7A7A7A\";\n    });\n    document.getElementById(element).style.backgroundColor = \"#E8F0FE\";\n    document.getElementById(element).style.color = \"#1967DA\";\n  }; // DYNAMIC FILE ICONS\n\n\n  _s(highlightIcons, \"OQsdBiwp0sbbKtP82EMllUKuLR8=\", false, function () {\n    return [useSelector];\n  });\n\n  const [fileIcons, setFileIcons] = useState(null);\n  useEffect(() => {\n    fetch(\"/files\").then(res => res.json()).then(data => {\n      let divs = [];\n      let list = [];\n      data.files.forEach(element => {\n        list.push(element);\n        divs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          id: element,\n          className: \"icons__container\",\n          onClick: () => highlightIcons(element),\n          onDoubleClick: () => showPreview(element),\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: element\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)\n        }, element, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this));\n      });\n      dispatch(setIconsList(list));\n      setFileIcons(divs);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"files__container\",\n    children: [!fileIcons ? \"Loading...\" : fileIcons, selectedFile]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(FileIcons, \"AEcmMFPz2vpfHP88sNY7YD3GU+k=\", false, function () {\n  return [useDispatch];\n});\n\n_c = FileIcons;\nexport default FileIcons;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileIcons\");","map":{"version":3,"sources":["D:/Documents/Coding/express-react-seperate/client/src/components/FileIcons.js"],"names":["useState","useEffect","useSelector","useDispatch","setIconsList","selectIconsList","ArrowBackIcon","FileIcons","dispatch","selectedFile","setSelectedFile","showPreview","file","fileType","split","pop","toLowerCase","media","closePreview","highlightIcons","element","console","log","files","forEach","id","document","getElementById","style","backgroundColor","color","fileIcons","setFileIcons","fetch","then","res","json","data","divs","list","push"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setIconsList, selectIconsList } from \"../features/iconsSlice\";\r\nimport './FileIcons.css';\r\nimport './FilePreview.css';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n// import FilePreview from './FilePreview';\r\n\r\nfunction FileIcons() {\r\n  const dispatch = useDispatch();\r\n\r\n  // PREVIEW OVERLAY\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  \r\n  const showPreview = (file) => {\r\n    let fileType = file.split('.').pop().toLowerCase();\r\n    var media;\r\n    switch (fileType) {\r\n      case \"mp4\":\r\n        media = \r\n        <video className=\"preview\" controls muted=\"muted\" loop autoPlay>\r\n          <source src={\"/media/\" + file} type=\"video/mp4\" />\r\n        </video>\r\n        break;\r\n      case \"png\":\r\n      case \"jpg\":\r\n      case \"gif\":\r\n        media = <img className=\"preview\" src={\"/media/\" + file} alt={file}/>\r\n        break;\r\n      default:\r\n        media = <div className=\"preview__unsupported\">This file type is not supported.</div>\r\n    }\r\n    setSelectedFile(\r\n      <div className=\"overlay\">\r\n        <div className=\"overlay__header\">\r\n          <div className=\"preview__close\" onClick={closePreview}>\r\n            <ArrowBackIcon className=\"preview__close-icon\"/>\r\n          </div>\r\n        </div>\r\n        {media}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const closePreview = () => {\r\n    setSelectedFile(null);\r\n  }\r\n\r\n  // HIGHLIGHTING ICONS\r\n  // TODO: Create this with useRef instead...\r\n  const highlightIcons = (element) => {\r\n    console.log(files);\r\n    let files = useSelector(selectIconsList);\r\n    files.forEach(id => {\r\n      console.log(id);\r\n      document.getElementById(id).style.backgroundColor = \"white\"\r\n      document.getElementById(id).style.color = \"#7A7A7A\"\r\n    });\r\n    document.getElementById(element).style.backgroundColor = \"#E8F0FE\"\r\n    document.getElementById(element).style.color = \"#1967DA\"\r\n  }\r\n\r\n  // DYNAMIC FILE ICONS\r\n  const [fileIcons, setFileIcons] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/files\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        let divs = [];\r\n        let list = [];\r\n\r\n        data.files.forEach(element => {\r\n          list.push(element);\r\n          divs.push(\r\n          <div \r\n            key={element}\r\n            id={element}\r\n            className=\"icons__container\"\r\n            onClick={() => highlightIcons(element)}\r\n            onDoubleClick={() => showPreview(element)}\r\n          >\r\n            <h1>{element}</h1>\r\n          </div>\r\n          );\r\n        });\r\n        dispatch(setIconsList(list));\r\n        setFileIcons(divs);\r\n      })\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"files__container\">\r\n        {!fileIcons ? \"Loading...\" : fileIcons}\r\n        {selectedFile}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FileIcons;"]},"metadata":{},"sourceType":"module"}