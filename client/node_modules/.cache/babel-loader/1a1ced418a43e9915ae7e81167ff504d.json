{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\Coding\\\\express-react-seperate\\\\client\\\\src\\\\components\\\\FileIcons.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport './FileIcons.css';\nimport './FilePreview.css';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { useDispatch } from 'react-redux';\nimport { setPreviewMedia } from '../features/previewSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FileIcons() {\n  _s();\n\n  const dispatch = useDispatch(); // DYNAMIC FILE ICONS\n\n  const [fileIcons, setFileIcons] = useState(null);\n  const ref = useRef({\n    fileList: []\n  });\n  useEffect(() => {\n    fetch(\"/files\").then(res => res.json()).then(data => {\n      let divs = [];\n      let list = [];\n      data.files.forEach(element => {\n        list.push(element);\n        divs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          id: element,\n          className: \"icons__container\",\n          onClick: () => highlightIcons(element),\n          onDoubleClick: () => showPreview(element),\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: element\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)\n        }, element, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this));\n      });\n      ref.current.fileList = list;\n      setFileIcons(divs);\n    });\n  }, []); // HIGHLIGHTING ICONS\n\n  const highlightIcons = element => {\n    let fileList = ref.current.fileList;\n    fileList.forEach(element => {\n      document.getElementById(element).style.backgroundColor = \"white\";\n      document.getElementById(element).style.color = \"#7A7A7A\";\n    });\n    document.getElementById(element).style.backgroundColor = \"#E8F0FE\";\n    document.getElementById(element).style.color = \"#1967DA\";\n  }; // PREVIEW OVERLAY\n\n\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const showPreview = file => {\n    let fileType = file.split('.').pop().toLowerCase();\n    var media;\n\n    switch (fileType) {\n      case \"mp4\":\n        media = /*#__PURE__*/_jsxDEV(\"video\", {\n          className: \"preview\",\n          controls: true,\n          muted: \"muted\",\n          loop: true,\n          autoPlay: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: \"/media/\" + file,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this);\n        break;\n\n      case \"png\":\n      case \"jpg\":\n      case \"gif\":\n        media = /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"preview\",\n          src: \"/media/\" + file,\n          alt: file\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this);\n        break;\n\n      default:\n        media = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview__unsupported\",\n          children: \"This file type is not supported.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this);\n    }\n\n    dispatch(setPreviewMedia(media)); // setSelectedFile(\n    //   <div className=\"overlay\">\n    //     <div className=\"overlay__header\">\n    //       <div className=\"preview__close\" onClick={closePreview}>\n    //         <ArrowBackIcon className=\"preview__close-icon\"/>\n    //       </div>\n    //     </div>\n    //     {media}\n    //   </div>\n    // )\n  };\n\n  const closePreview = () => {\n    setSelectedFile(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"files__container\",\n    children: [!fileIcons ? \"Loading...\" : fileIcons, selectedFile]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FileIcons, \"cYyGqIoQWqLPTcvcMZFYjUqPLN0=\", false, function () {\n  return [useDispatch];\n});\n\n_c = FileIcons;\nexport default FileIcons;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileIcons\");","map":{"version":3,"sources":["D:/Documents/Coding/express-react-seperate/client/src/components/FileIcons.js"],"names":["useState","useEffect","useRef","ArrowBackIcon","useDispatch","setPreviewMedia","FileIcons","dispatch","fileIcons","setFileIcons","ref","fileList","fetch","then","res","json","data","divs","list","files","forEach","element","push","highlightIcons","showPreview","current","document","getElementById","style","backgroundColor","color","selectedFile","setSelectedFile","file","fileType","split","pop","toLowerCase","media","closePreview"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport './FileIcons.css';\r\nimport './FilePreview.css';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setPreviewMedia } from '../features/previewSlice'\r\n\r\nfunction FileIcons() {\r\n  const dispatch = useDispatch();\r\n\r\n  // DYNAMIC FILE ICONS\r\n  const [fileIcons, setFileIcons] = useState(null);\r\n  const ref = useRef({\r\n    fileList: []\r\n  })\r\n\r\n  useEffect(() => {\r\n    fetch(\"/files\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        let divs = [];\r\n        let list = [];\r\n        data.files.forEach(element => {\r\n          list.push(element);\r\n          divs.push(\r\n          <div \r\n            key={element}\r\n            id={element}\r\n            className=\"icons__container\"\r\n            onClick={() => highlightIcons(element)}\r\n            onDoubleClick={() => showPreview(element)}\r\n          >\r\n            <h1>{element}</h1>\r\n          </div>\r\n          );\r\n        });\r\n        ref.current.fileList = list;\r\n        setFileIcons(divs);\r\n      })\r\n  }, []);\r\n\r\n  // HIGHLIGHTING ICONS\r\n  const highlightIcons = (element) => {\r\n    let fileList = ref.current.fileList;\r\n    fileList.forEach(element => {\r\n      document.getElementById(element).style.backgroundColor = \"white\"\r\n      document.getElementById(element).style.color = \"#7A7A7A\"\r\n    });\r\n    document.getElementById(element).style.backgroundColor = \"#E8F0FE\"\r\n    document.getElementById(element).style.color = \"#1967DA\"\r\n  }\r\n\r\n  // PREVIEW OVERLAY\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  \r\n  const showPreview = (file) => {\r\n    let fileType = file.split('.').pop().toLowerCase();\r\n    var media;\r\n    switch (fileType) {\r\n      case \"mp4\":\r\n        media = \r\n        <video className=\"preview\" controls muted=\"muted\" loop autoPlay>\r\n          <source src={\"/media/\" + file} type=\"video/mp4\" />\r\n        </video>\r\n        break;\r\n      case \"png\":\r\n      case \"jpg\":\r\n      case \"gif\":\r\n        media = <img className=\"preview\" src={\"/media/\" + file} alt={file}/>\r\n        break;\r\n      default:\r\n        media = <div className=\"preview__unsupported\">This file type is not supported.</div>\r\n    }\r\n    dispatch(setPreviewMedia(media))\r\n    // setSelectedFile(\r\n    //   <div className=\"overlay\">\r\n    //     <div className=\"overlay__header\">\r\n    //       <div className=\"preview__close\" onClick={closePreview}>\r\n    //         <ArrowBackIcon className=\"preview__close-icon\"/>\r\n    //       </div>\r\n    //     </div>\r\n    //     {media}\r\n    //   </div>\r\n    // )\r\n  }\r\n\r\n  const closePreview = () => {\r\n    setSelectedFile(null);\r\n  }\r\n\r\n  return (\r\n    <div className=\"files__container\">\r\n        {!fileIcons ? \"Loading...\" : fileIcons}\r\n        {selectedFile}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FileIcons;"]},"metadata":{},"sourceType":"module"}