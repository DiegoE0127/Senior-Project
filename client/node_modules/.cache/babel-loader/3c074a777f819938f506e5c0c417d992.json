{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\Coding\\\\express-react-seperate\\\\client\\\\src\\\\components\\\\FileIcons.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport './FileIcons.css';\nimport './FilePreview.css';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack'; // import FilePreview from './FilePreview';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FileIcons() {\n  _s();\n\n  // PREVIEW OVERLAY\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  function showPreview(file) {\n    let fileType = file.split('.').pop().toLowerCase();\n    var media;\n\n    switch (fileType) {\n      case \"mp4\":\n        media = /*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"mediaPreview\",\n          controls: true,\n          muted: \"muted\",\n          loop: true,\n          autoPlay: true,\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: \"/media/\" + file,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 9\n        }, this);\n        break;\n\n      case \"png\":\n      case \"jpg\":\n      case \"gif\":\n        media = /*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"mediaPreview\",\n          src: \"/media/\" + file,\n          alt: file\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this);\n        break;\n\n      default:\n        media = /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this);\n    }\n\n    setSelectedFile( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlay__header\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview__close\",\n          onClick: closePreview,\n          children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n            className: \"preview__close-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), media]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this));\n  }\n\n  function closePreview() {\n    setSelectedFile(null);\n  } // HIGHLIGHTING ICONS\n  // TODO: Create this with useRef instead...\n\n\n  function highlightIcons(element) {\n    fetch(\"/files\").then(res => res.json()).then(data => {\n      data.array.forEach(element => {\n        document.getElementById(element).style.backgroundColor = \"white\";\n        document.getElementById(element).style.color = \"#7A7A7A\";\n      });\n      document.getElementById(element).style.backgroundColor = \"#E8F0FE\";\n      document.getElementById(element).style.color = \"#1967DA\";\n    });\n  } // DYNAMIC FILE ICONS\n\n\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetch(\"/files\").then(res => res.json()).then(data => {\n      let divs = [];\n      data.array.forEach(element => {\n        divs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          id: element,\n          className: \"icons__container\",\n          onClick: () => highlightIcons(element),\n          onDoubleClick: () => showPreview(element),\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: element\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, element, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this));\n      });\n      setData(divs);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"files__container\",\n    children: [!data ? \"Loading...\" : data, selectedFile]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FileIcons, \"3cKJ3b9lzyNUwfRCLD5Zzz8GB/Y=\");\n\n_c = FileIcons;\nexport default FileIcons;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileIcons\");","map":{"version":3,"sources":["D:/Documents/Coding/express-react-seperate/client/src/components/FileIcons.js"],"names":["useState","useEffect","ArrowBackIcon","FileIcons","selectedFile","setSelectedFile","showPreview","file","fileType","split","pop","toLowerCase","media","closePreview","highlightIcons","element","fetch","then","res","json","data","array","forEach","document","getElementById","style","backgroundColor","color","setData","divs","push"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport './FileIcons.css';\r\nimport './FilePreview.css';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n// import FilePreview from './FilePreview';\r\n\r\nfunction FileIcons() {\r\n  // PREVIEW OVERLAY\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  \r\n  function showPreview(file) {\r\n    let fileType = file.split('.').pop().toLowerCase();\r\n    var media;\r\n    switch (fileType) {\r\n      case \"mp4\":\r\n        media = \r\n        <video id=\"mediaPreview\" controls muted=\"muted\" loop autoPlay>\r\n          <source src={\"/media/\" + file} type=\"video/mp4\" />\r\n        </video>\r\n        break;\r\n      case \"png\":\r\n      case \"jpg\":\r\n      case \"gif\":\r\n        media = <img id=\"mediaPreview\" src={\"/media/\" + file} alt={file}/>\r\n        break;\r\n      default:\r\n        media = <div>Test</div>\r\n    }\r\n    setSelectedFile(\r\n      <div className=\"overlay\">\r\n        <div className=\"overlay__header\">\r\n          <div className=\"preview__close\" onClick={closePreview}>\r\n            <ArrowBackIcon className=\"preview__close-icon\"/>\r\n          </div>\r\n        </div>\r\n        {media}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  function closePreview() {\r\n    setSelectedFile(null);\r\n  }\r\n\r\n  // HIGHLIGHTING ICONS\r\n  // TODO: Create this with useRef instead...\r\n  function highlightIcons(element) {\r\n      fetch(\"/files\")\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          data.array.forEach(element => {\r\n            document.getElementById(element).style.backgroundColor = \"white\"\r\n            document.getElementById(element).style.color = \"#7A7A7A\"\r\n          });\r\n          document.getElementById(element).style.backgroundColor = \"#E8F0FE\"\r\n          document.getElementById(element).style.color = \"#1967DA\"\r\n        })\r\n  }\r\n\r\n  // DYNAMIC FILE ICONS\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/files\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        let divs = [];\r\n        data.array.forEach(element => {\r\n          divs.push(\r\n          <div \r\n            key={element}\r\n            id={element}\r\n            className=\"icons__container\"\r\n            onClick={() => highlightIcons(element)}\r\n            onDoubleClick={() => showPreview(element)}\r\n          >\r\n            <h1>{element}</h1>\r\n          </div>\r\n          );\r\n        });\r\n        setData(divs);\r\n      })\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"files__container\">\r\n        {!data ? \"Loading...\" : data}\r\n        {selectedFile}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FileIcons;"]},"metadata":{},"sourceType":"module"}